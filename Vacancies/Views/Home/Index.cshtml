<link rel="stylesheet" href="https://js.arcgis.com/3.15/esri/css/esri.css">
<script src="https://js.arcgis.com/3.15/"></script>
<script src="https://code.jquery.com/jquery-2.1.4.js"></script>

<script>
    var availableCuisines = [];
    var lastServiceArea;

    require([
    "esri/map",
    "esri/layers/FeatureLayer",
    "esri/tasks/ServiceAreaTask",
    "esri/tasks/ServiceAreaParameters",
    "esri/tasks/FeatureSet",
    "esri/geometry/geometryEngine",
    "esri/symbols/PictureMarkerSymbol",
    "esri/symbols/SimpleMarkerSymbol",
    "esri/symbols/SimpleLineSymbol",
    "esri/symbols/SimpleFillSymbol",
    "esri/renderers/ClassBreaksRenderer",
    "esri/Color",
    "dojo/_base/array",
    "esri/graphic",
    "esri/geometry/Point",
    "esri/tasks/query",
    "dojo/_base/unload",
    "esri/IdentityManager",
    "esri/config",
    "dojo/domReady!"
    ],
        function (Map,
            FeatureLayer,
            ServiceAreaTask,
            ServiceAreaParameters,
            FeatureSet,
            GeometryEngine,
            PictureMarkerSymbol,
            SimpleMarkerSymbol,
            SimpleLineSymbol,
            SimpleFillSymbol,
            ClassBreaksRenderer,
            Color,
            arrayUtils,
            Graphic,
            Point,
            Query,
            baseUnload,
            esriId,
            config) {

            doAuth();
            esri.config.defaults.io.corsEnabledServers.push("route.arcgis.com")

            var featureLayer = getFeatureLayer();

            var map = getMap(featureLayer);

            map.on("click", function (evt) {
                clickpoint = evt;
                map.graphics.clear();
                featureLayer.clearSelection();

                var pointSymbol = new PictureMarkerSymbol("http://localhost:55311/content/point.png", 20, 30);


                var inPoint = new Point(evt.mapPoint.x, evt.mapPoint.y, map.spatialReference);
                var location = new Graphic(inPoint, pointSymbol);

                // Show point on the map
                map.graphics.add(location);

                params = new ServiceAreaParameters();
                params.defaultBreaks = [2];
                params.outSpatialReference = map.spatialReference;
                params.returnFacilities = false;
                params.travelMode = { "attributeParameterValues": [{ "parameterName": "Restriction Usage", "attributeName": "Walking", "value": "PROHIBITED" }, { "parameterName": "Restriction Usage", "attributeName": "Preferred for Pedestrians", "value": "PREFER_LOW" }, { "parameterName": "Walking Speed (km/h)", "attributeName": "WalkTime", "value": 5 }], "description": "Follows paths and roads that allow pedestrian traffic and finds solutions that optimize travel time. The walking speed is set to 5 kilometers per hour.", "impedanceAttributeName": "WalkTime", "simplificationToleranceUnits": "esriMeters", "uturnAtJunctions": "esriNFSBAllowBacktrack", "restrictionAttributeNames": ["Preferred for Pedestrians", "Walking"], "useHierarchy": false, "simplificationTolerance": 2, "timeAttributeName": "WalkTime", "distanceAttributeName": "Miles", "type": "WALK", "id": "caFAgoThrvUpkFBW", "name": "Walking Time" };

                serviceAreaTask = new ServiceAreaTask("https://route.arcgis.com/arcgis/rest/services/World/ServiceAreas/NAServer/ServiceArea_World");

                var features = [location];
                var facilities = new FeatureSet();
                facilities.features = features;
                params.facilities = facilities;

                serviceAreaTask.solve(params, function (solveResult) {
                    // 6: You get a polygon back. Draw it on a map, but you could use it as the
                    //    geometry of a Query object.
                    var polygonSymbol = new SimpleFillSymbol(
                      "solid",
                      new SimpleLineSymbol("solid", new Color([232, 104, 80, 0.25]), 2),
                      new Color([232, 104, 80, 0.05])
                    );
                    // Will only be one in practice.
                    arrayUtils.forEach(solveResult.serviceAreaPolygons, function (serviceArea) {
                        lastServiceArea = serviceArea;
                        var g = serviceArea.geometry;
                        g = GeometryEngine.buffer(g, 60);
                        serviceArea.setGeometry(g);
                        serviceArea.setSymbol(polygonSymbol);
                        map.graphics.add(serviceArea);
                        updateFeatureLayerWithGeometry(featureLayer, g);
                        map.setExtent(g.getExtent(), true);
                    });

                }, function (err) {
                    console.log("Got an errrorr: " + err.message);
                });
            });

            function putInfo(graphic) {
                $("#restaurant-name").text(graphic.name);
                $("#info-cuisine").text("Cuisine: " + graphic.cuisine_type);
                $("#info-rating").text(graphic.rating + " Stars");
                var environment = "Busy";
                if (graphic.congestion < 0.34) {
                    environment = "Empty";
                } else if (graphic.congestion < 0.67) {
                    environment = "Cosy";
                }
                $("#info-environment").text(environment);
                console.log(graphic);
            }

            function getFeatureLayer(whereQuery) {


                var featureLayer = new FeatureLayer("http://services5.arcgis.com/ulYrxJGspewRy1Z8/arcgis/rest/services/restaurants3/FeatureServer/0",
                    {
                        outFields: ["*"],
                        mode: FeatureLayer.MODE_SELECTION
                    });

                featureLayer.on("load", function (e) {
                    var size = 20;
                    updateFeatureLayerWithAll(featureLayer);
                    var defaultSymbol = new PictureMarkerSymbol("http://localhost:55311/content/pin-green2.png", size, size);

                    var renderer = new ClassBreaksRenderer(defaultSymbol, "congestion");

                    renderer.addBreak(0, 0.34, new PictureMarkerSymbol("http://localhost:55311/content/pin-green2.png", size, size));
                    renderer.addBreak(0.34, 0.67, new PictureMarkerSymbol("http://localhost:55311/content/pin-orange2.png", size, size));
                    renderer.addBreak(0.67, 1, new PictureMarkerSymbol("http://localhost:55311/content/pin-red2.png", size, size));

                    featureLayer.setRenderer(renderer);

                    featureLayer.on("click", function (e) {
                        putInfo(e.graphic.attributes);
                        e.stopPropagation()
                    });

                    setTimeout(randomUpdate(), 10)
                });

                return featureLayer;
            }

            function getMap(featureLayer) {
                var map = new Map("map", {
                    center: [-0.130322, 51.510416],
                    zoom: 17,
                    basemap: "gray"
                });

                map.addLayer(featureLayer);
                return map;
            }

            function updateFeatureLayerWithAll(featureLayer) {
                var query = new Query();
                query.where = "1=1";
                if (lastServiceArea) {
                    query.geometry = lastServiceArea.geometry;
                }
                featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW);
            }

            function updateFeatureLayer(featureLayer, whereQuery) {
                var query = new Query();
                query.where = whereQuery;
                if (lastServiceArea) {
                    query.geometry = lastServiceArea.geometry;
                }
                featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW);
            }

            function updateFeatureLayerWithGeometry(featureLayer, geometry) {
                var query = new Query();
                query.where = getWhere();
                query.geometry = geometry;
                featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW);
            }

            function randomUpdate() {
                var query = new Query();
                query.where = "FID=960";
                var rand1 = getRandomInt(0, 50);
                if (rand1 < 5 && featureLayer.graphics.length > 0) {
                    var n = getRandomInt(0, featureLayer.graphics.length -1);
                    var rand = getRandomInt(0, 2);
                    if(rand == 0){
                        featureLayer.graphics[n].setSymbol(new PictureMarkerSymbol("http://localhost:55311/content/pin-green2.png", 25, 25))
                    }
                    if(rand == 1){
                        featureLayer.graphics[n].setSymbol(new PictureMarkerSymbol("http://localhost:55311/content/pin-orange2.png", 25, 25))
                    }
                    else{
                        featureLayer.graphics[n].setSymbol(new PictureMarkerSymbol("http://localhost:55311/content/pin-red2.png", 25, 25))
                    }
                }

                setTimeout(randomUpdate, 10);
            }

            function doAuth() {
                var cred = "esri_jsapi_id_manager_data";
                // store credentials/serverInfos before the page unloads
                baseUnload.addOnUnload(storeCredentials);

                // look for credentials in local storage
                loadCredentials();

                function loadCredentials() {
                    var idJson, idObject;

                    if (supports_local_storage()) {
                        // read from local storage
                        idJson = window.localStorage.getItem(cred);
                    }
                    else {
                        // read from a cookie
                        idJson = cookie(cred);
                    }

                    if (idJson && idJson != "null" && idJson.length > 4) {
                        idObject = JSON.parse(idJson);
                        esriId.initialize(idObject);
                    }
                    else {
                        // console.log("didn't find anything to load :(");
                    }
                }

                function storeCredentials() {
                    // make sure there are some credentials to persist
                    if (esriId.credentials.length === 0) {
                        return;
                    }

                    // serialize the ID manager state to a string
                    var idString = JSON.stringify(esriId.toJson());
                    // store it client side
                    if (supports_local_storage()) {
                        // use local storage
                        window.localStorage.setItem(cred, idString);
                        // console.log("wrote to local storage");
                    }
                    else {
                        // use a cookie
                        cookie(cred, idString, { expires: 1 });
                        // console.log("wrote a cookie :-/");
                    }
                }

                function supports_local_storage() {
                    try {
                        return "localStorage" in window && window["localStorage"] !== null;
                    } catch (e) {
                        return false;
                    }
                }


                $(document).ready(function () {
                    $("#filter-cuisine").on("change", function (e) {
                        filterCuisine()
                    })
                });

                function filterCuisine() {
                    var where = getWhere();
                    updateFeatureLayer(featureLayer, where);
                }

                function updateThatOneThing() {
                    var num = $.ajax("http://localhost:55311/api/endpoint/index");

                    console.log("I GOT THE NUMBER: " + num);
                }
            }
        });

    function toggle(source) {
        checkboxes = document.getElementsByName(source.name);
        for (var i = 0, n = checkboxes.length; i < n; i++) {
            checkboxes[i].checked = source.checked;
        }
    }

    function toggleAll(source) {
        if (!source.checked) {
            $('#cuisine-type-all').attr('checked', false);
        }
    }

    function getWhere() {
        var vals = getCheckedValues($("#filter-cuisine"));
        if (vals.length >= 6) {
            return "1=1";
        }
        var where = getWhereForCuisines(vals);
        return where;
    }

    function getWhereForCuisines(cuisines) {
        var where = "1=2";
        for (var i = 0; i < cuisines.length; i++) {
            if (i > 0) {
                where += " or ";
            } else {
                where = "";
            }
            where += "cuisine_type = '" + cuisines[i] + "'";
        }
        return where;
    }

    function getCheckedValues(target) {
        var checked = target.find(":checked");
        var values = [];
        checked.each(function (index, el) {
            values.push(el.value);
        });
        return values;
    }

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

</script>

<h3 id="live">LIVE</h3>
<h5 id="comment1">Better luck next time!</h5>
<img id="red" src="images/RedDots.png">
<img id="yellow" src="images/YellowDots.png">
<img id="green" src="images/GreenDots.png">
<h5 id="comment2">Spaces available</h5>


<div id="filter-cuisine">
    <h3 id="cuisine">Cuisine:</h3>
    <div id="indian">
        <label><input id="check1" type="checkbox" value="indian" checked="checked">Indian</label>
    </div>
    <div id="asian">
        <label><input id="check2" type="checkbox" value="asian" checked="checked">Asian</label>
    </div>
    <div id="chinese">
        <label><input id="check3" type="checkbox" value="chinese" checked="checked">Chinese</label>
    </div>
    <div id="english">
        <label><input id="check4" type="checkbox" value="english" checked="checked">English</label>
    </div>
    <div id="italian">
        <label><input id="check5" type="checkbox" value="italian" checked="checked">Italian</label>
    </div>
    <div id="pizza">
        <label><input id="check6" type="checkbox" value="pizza" checked="checked">Pizza</label>
    </div>
</div>

<div id="filter-rating">
    <h3 id="rating">Rating:</h3>
    <select id="drop-down">
        <option value="All">All</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select>
</div>

<div id="filter-environment">
    <h3 id="environment">Environment:</h3>
    <div id="empty">
        <label><input id="check7" type="checkbox" value="">Empty</label>
    </div>
    <div id="cozy">
        <label><input id="check8" type="checkbox" value="">Cozy</label>
    </div>
    <div id="busy">
        <label><input id="check9" type="checkbox" value="">Busy</label>
    </div>
</div>

<div id="map">
</div>

<div id="info-head">
    <h3 id="restaurant-name"></h3>
</div>
<div id="info-details">
    <h4 id="info-cuisine"></h4>
    <h4 id="info-rating"></h4>
    <h4 id="info-environment"></h4>
</div>